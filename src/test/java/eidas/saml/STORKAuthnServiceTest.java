package eidas.saml;

import static org.junit.Assert.assertEquals;

import java.util.Base64;

import org.apache.commons.io.Charsets;
import org.apache.commons.io.IOUtils;
import org.junit.Test;
import org.opensaml.util.resource.ClasspathResource;
import org.springframework.beans.factory.annotation.Autowired;

import eidas.AbstractIntegrationTest;
import eu.stork.mw.messages.saml.STORKResponse;


public class STORKAuthnServiceTest extends AbstractIntegrationTest {

    @Autowired
    private STORKAuthnService subject;

    private static String RESPONSE = "";

    @Test
    public void build_stork_response() throws Exception {
        STORKResponse response = subject.buildSTORKResponse(new String(Base64.getDecoder().decode(RESPONSE), Charsets.UTF_8));
        assertEquals("_d8cf1da6d4b276d16947c28bd4d49435", response.getID());
    }
}
